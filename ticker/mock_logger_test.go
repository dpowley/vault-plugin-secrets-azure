// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hashicorp/go-hclog (interfaces: Logger)

// Package ticker is a generated GoMock package.
package ticker

import (
	io "io"
	log "log"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hclog "github.com/hashicorp/go-hclog"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// ImpliedArgs mocks base method.
func (m *MockLogger) ImpliedArgs() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImpliedArgs")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// ImpliedArgs indicates an expected call of ImpliedArgs.
func (mr *MockLoggerMockRecorder) ImpliedArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImpliedArgs", reflect.TypeOf((*MockLogger)(nil).ImpliedArgs))
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// IsDebug mocks base method.
func (m *MockLogger) IsDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebug indicates an expected call of IsDebug.
func (mr *MockLoggerMockRecorder) IsDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebug", reflect.TypeOf((*MockLogger)(nil).IsDebug))
}

// IsError mocks base method.
func (m *MockLogger) IsError() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsError")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsError indicates an expected call of IsError.
func (mr *MockLoggerMockRecorder) IsError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsError", reflect.TypeOf((*MockLogger)(nil).IsError))
}

// IsInfo mocks base method.
func (m *MockLogger) IsInfo() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInfo")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInfo indicates an expected call of IsInfo.
func (mr *MockLoggerMockRecorder) IsInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInfo", reflect.TypeOf((*MockLogger)(nil).IsInfo))
}

// IsTrace mocks base method.
func (m *MockLogger) IsTrace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrace indicates an expected call of IsTrace.
func (mr *MockLoggerMockRecorder) IsTrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrace", reflect.TypeOf((*MockLogger)(nil).IsTrace))
}

// IsWarn mocks base method.
func (m *MockLogger) IsWarn() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWarn")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWarn indicates an expected call of IsWarn.
func (mr *MockLoggerMockRecorder) IsWarn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWarn", reflect.TypeOf((*MockLogger)(nil).IsWarn))
}

// Log mocks base method.
func (m *MockLogger) Log(arg0 hclog.Level, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), varargs...)
}

// Name mocks base method.
func (m *MockLogger) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockLoggerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLogger)(nil).Name))
}

// Named mocks base method.
func (m *MockLogger) Named(arg0 string) hclog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Named", arg0)
	ret0, _ := ret[0].(hclog.Logger)
	return ret0
}

// Named indicates an expected call of Named.
func (mr *MockLoggerMockRecorder) Named(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*MockLogger)(nil).Named), arg0)
}

// ResetNamed mocks base method.
func (m *MockLogger) ResetNamed(arg0 string) hclog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetNamed", arg0)
	ret0, _ := ret[0].(hclog.Logger)
	return ret0
}

// ResetNamed indicates an expected call of ResetNamed.
func (mr *MockLoggerMockRecorder) ResetNamed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNamed", reflect.TypeOf((*MockLogger)(nil).ResetNamed), arg0)
}

// SetLevel mocks base method.
func (m *MockLogger) SetLevel(arg0 hclog.Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", arg0)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLoggerMockRecorder) SetLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLogger)(nil).SetLevel), arg0)
}

// StandardLogger mocks base method.
func (m *MockLogger) StandardLogger(arg0 *hclog.StandardLoggerOptions) *log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardLogger", arg0)
	ret0, _ := ret[0].(*log.Logger)
	return ret0
}

// StandardLogger indicates an expected call of StandardLogger.
func (mr *MockLoggerMockRecorder) StandardLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardLogger", reflect.TypeOf((*MockLogger)(nil).StandardLogger), arg0)
}

// StandardWriter mocks base method.
func (m *MockLogger) StandardWriter(arg0 *hclog.StandardLoggerOptions) io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StandardWriter", arg0)
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// StandardWriter indicates an expected call of StandardWriter.
func (mr *MockLoggerMockRecorder) StandardWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StandardWriter", reflect.TypeOf((*MockLogger)(nil).StandardWriter), arg0)
}

// Trace mocks base method.
func (m *MockLogger) Trace(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerMockRecorder) Trace(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLogger)(nil).Trace), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLogger) With(arg0 ...interface{}) hclog.Logger {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(hclog.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), arg0...)
}
